// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StelleriumNetworkInterfacePacket.proto

#ifndef PROTOBUF_StelleriumNetworkInterfacePacket_2eproto__INCLUDED
#define PROTOBUF_StelleriumNetworkInterfacePacket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_StelleriumNetworkInterfacePacket_2eproto();
void protobuf_AssignDesc_StelleriumNetworkInterfacePacket_2eproto();
void protobuf_ShutdownFile_StelleriumNetworkInterfacePacket_2eproto();

class Location;
class NetworkInterfacePacket;

enum Weather {
  CLEAR = 0,
  PART_CLOUDY = 1,
  CLOUDY = 2,
  OVERCAST = 3
};
bool Weather_IsValid(int value);
const Weather Weather_MIN = CLEAR;
const Weather Weather_MAX = OVERCAST;
const int Weather_ARRAYSIZE = Weather_MAX + 1;

const ::google::protobuf::EnumDescriptor* Weather_descriptor();
inline const ::std::string& Weather_Name(Weather value) {
  return ::google::protobuf::internal::NameOfEnum(
    Weather_descriptor(), value);
}
inline bool Weather_Parse(
    const ::std::string& name, Weather* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Weather>(
    Weather_descriptor(), name, value);
}
// ===================================================================

class Location : public ::google::protobuf::Message {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  Location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required double altitude = 3;
  inline bool has_altitude() const;
  inline void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  inline double altitude() const;
  inline void set_altitude(double value);

  // @@protoc_insertion_point(class_scope:Location)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_altitude();
  inline void clear_has_altitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double latitude_;
  double longitude_;
  double altitude_;
  friend void  protobuf_AddDesc_StelleriumNetworkInterfacePacket_2eproto();
  friend void protobuf_AssignDesc_StelleriumNetworkInterfacePacket_2eproto();
  friend void protobuf_ShutdownFile_StelleriumNetworkInterfacePacket_2eproto();

  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// -------------------------------------------------------------------

class NetworkInterfacePacket : public ::google::protobuf::Message {
 public:
  NetworkInterfacePacket();
  virtual ~NetworkInterfacePacket();

  NetworkInterfacePacket(const NetworkInterfacePacket& from);

  inline NetworkInterfacePacket& operator=(const NetworkInterfacePacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkInterfacePacket& default_instance();

  void Swap(NetworkInterfacePacket* other);

  // implements Message ----------------------------------------------

  NetworkInterfacePacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkInterfacePacket& from);
  void MergeFrom(const NetworkInterfacePacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Location location = 1;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 1;
  inline const ::Location& location() const;
  inline ::Location* mutable_location();
  inline ::Location* release_location();
  inline void set_allocated_location(::Location* location);

  // optional string time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // optional .Weather weather = 3 [default = CLEAR];
  inline bool has_weather() const;
  inline void clear_weather();
  static const int kWeatherFieldNumber = 3;
  inline ::Weather weather() const;
  inline void set_weather(::Weather value);

  // optional string vehicleName = 4;
  inline bool has_vehiclename() const;
  inline void clear_vehiclename();
  static const int kVehicleNameFieldNumber = 4;
  inline const ::std::string& vehiclename() const;
  inline void set_vehiclename(const ::std::string& value);
  inline void set_vehiclename(const char* value);
  inline void set_vehiclename(const char* value, size_t size);
  inline ::std::string* mutable_vehiclename();
  inline ::std::string* release_vehiclename();
  inline void set_allocated_vehiclename(::std::string* vehiclename);

  // @@protoc_insertion_point(class_scope:NetworkInterfacePacket)
 private:
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_weather();
  inline void clear_has_weather();
  inline void set_has_vehiclename();
  inline void clear_has_vehiclename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Location* location_;
  ::std::string* time_;
  ::std::string* vehiclename_;
  int weather_;
  friend void  protobuf_AddDesc_StelleriumNetworkInterfacePacket_2eproto();
  friend void protobuf_AssignDesc_StelleriumNetworkInterfacePacket_2eproto();
  friend void protobuf_ShutdownFile_StelleriumNetworkInterfacePacket_2eproto();

  void InitAsDefaultInstance();
  static NetworkInterfacePacket* default_instance_;
};
// ===================================================================


// ===================================================================

// Location

// required double latitude = 1;
inline bool Location::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Location::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Location::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Location::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double Location::latitude() const {
  // @@protoc_insertion_point(field_get:Location.latitude)
  return latitude_;
}
inline void Location::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:Location.latitude)
}

// required double longitude = 2;
inline bool Location::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Location::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Location::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Location::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double Location::longitude() const {
  // @@protoc_insertion_point(field_get:Location.longitude)
  return longitude_;
}
inline void Location::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:Location.longitude)
}

// required double altitude = 3;
inline bool Location::has_altitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Location::set_has_altitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Location::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Location::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double Location::altitude() const {
  // @@protoc_insertion_point(field_get:Location.altitude)
  return altitude_;
}
inline void Location::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:Location.altitude)
}

// -------------------------------------------------------------------

// NetworkInterfacePacket

// optional .Location location = 1;
inline bool NetworkInterfacePacket::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkInterfacePacket::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkInterfacePacket::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkInterfacePacket::clear_location() {
  if (location_ != NULL) location_->::Location::Clear();
  clear_has_location();
}
inline const ::Location& NetworkInterfacePacket::location() const {
  // @@protoc_insertion_point(field_get:NetworkInterfacePacket.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::Location* NetworkInterfacePacket::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::Location;
  // @@protoc_insertion_point(field_mutable:NetworkInterfacePacket.location)
  return location_;
}
inline ::Location* NetworkInterfacePacket::release_location() {
  clear_has_location();
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline void NetworkInterfacePacket::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:NetworkInterfacePacket.location)
}

// optional string time = 2;
inline bool NetworkInterfacePacket::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkInterfacePacket::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkInterfacePacket::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkInterfacePacket::clear_time() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& NetworkInterfacePacket::time() const {
  // @@protoc_insertion_point(field_get:NetworkInterfacePacket.time)
  return *time_;
}
inline void NetworkInterfacePacket::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set:NetworkInterfacePacket.time)
}
inline void NetworkInterfacePacket::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set_char:NetworkInterfacePacket.time)
}
inline void NetworkInterfacePacket::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetworkInterfacePacket.time)
}
inline ::std::string* NetworkInterfacePacket::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NetworkInterfacePacket.time)
  return time_;
}
inline ::std::string* NetworkInterfacePacket::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NetworkInterfacePacket::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NetworkInterfacePacket.time)
}

// optional .Weather weather = 3 [default = CLEAR];
inline bool NetworkInterfacePacket::has_weather() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkInterfacePacket::set_has_weather() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetworkInterfacePacket::clear_has_weather() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetworkInterfacePacket::clear_weather() {
  weather_ = 0;
  clear_has_weather();
}
inline ::Weather NetworkInterfacePacket::weather() const {
  // @@protoc_insertion_point(field_get:NetworkInterfacePacket.weather)
  return static_cast< ::Weather >(weather_);
}
inline void NetworkInterfacePacket::set_weather(::Weather value) {
  assert(::Weather_IsValid(value));
  set_has_weather();
  weather_ = value;
  // @@protoc_insertion_point(field_set:NetworkInterfacePacket.weather)
}

// optional string vehicleName = 4;
inline bool NetworkInterfacePacket::has_vehiclename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetworkInterfacePacket::set_has_vehiclename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetworkInterfacePacket::clear_has_vehiclename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetworkInterfacePacket::clear_vehiclename() {
  if (vehiclename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehiclename_->clear();
  }
  clear_has_vehiclename();
}
inline const ::std::string& NetworkInterfacePacket::vehiclename() const {
  // @@protoc_insertion_point(field_get:NetworkInterfacePacket.vehicleName)
  return *vehiclename_;
}
inline void NetworkInterfacePacket::set_vehiclename(const ::std::string& value) {
  set_has_vehiclename();
  if (vehiclename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehiclename_ = new ::std::string;
  }
  vehiclename_->assign(value);
  // @@protoc_insertion_point(field_set:NetworkInterfacePacket.vehicleName)
}
inline void NetworkInterfacePacket::set_vehiclename(const char* value) {
  set_has_vehiclename();
  if (vehiclename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehiclename_ = new ::std::string;
  }
  vehiclename_->assign(value);
  // @@protoc_insertion_point(field_set_char:NetworkInterfacePacket.vehicleName)
}
inline void NetworkInterfacePacket::set_vehiclename(const char* value, size_t size) {
  set_has_vehiclename();
  if (vehiclename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehiclename_ = new ::std::string;
  }
  vehiclename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetworkInterfacePacket.vehicleName)
}
inline ::std::string* NetworkInterfacePacket::mutable_vehiclename() {
  set_has_vehiclename();
  if (vehiclename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehiclename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NetworkInterfacePacket.vehicleName)
  return vehiclename_;
}
inline ::std::string* NetworkInterfacePacket::release_vehiclename() {
  clear_has_vehiclename();
  if (vehiclename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vehiclename_;
    vehiclename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NetworkInterfacePacket::set_allocated_vehiclename(::std::string* vehiclename) {
  if (vehiclename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vehiclename_;
  }
  if (vehiclename) {
    set_has_vehiclename();
    vehiclename_ = vehiclename;
  } else {
    clear_has_vehiclename();
    vehiclename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NetworkInterfacePacket.vehicleName)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Weather> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Weather>() {
  return ::Weather_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StelleriumNetworkInterfacePacket_2eproto__INCLUDED
